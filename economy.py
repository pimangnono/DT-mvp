import json
import time
from agent import InstitutionalAgent
from institutional_agent.lca_agent import LCAAgent
from institutional_agent.industrialEcologist_agent import IndustrialEcologistAgent
from environment import Environment
from institutional_agent import llm_interface
import event_handlers

class Economy:
    """
    Encapsulates the entire state and logic for running one full version of an
    economic simulation, including a 'Genesis' phase to generate agents.
    """
    def __init__(self, economy_type, seed_agent_profiles, scenario_file, llm_client):
        """
        Initializes an economy using the robust, two-step "Describe-Then-Create"
        Genesis Phase to procedurally generate a surrounding ecosystem of agents.
        """
        self.economy_type = economy_type
        self.llm_client = llm_client
        
        self.environment = Environment(scenario_file)
        self.lca_auditor = LCAAgent(llm_client)
        
        self.eco_consultant = None 
        if self.economy_type == 'Circular':
            self.eco_consultant = IndustrialEcologistAgent(llm_client)
            print(f">>> Initializing '{self.economy_type}' Economy: Industrial Ecologist consultant has been ACTIVATED.")
        else:
            print(f">>> Initializing '{self.economy_type}' Economy: No Industrial Ecologist consultant is available.")

        # --- NEW: TWO-STEP GENESIS PHASE ---
        print(f"\n--- Starting Genesis Phase for '{self.economy_type}' Economy ---")
        
        # This list will hold the final, complete profiles generated by the LLM
        all_complete_generated_profiles = []

        for seed_profile in seed_agent_profiles:
            core_business_model = seed_profile.get('business_model', 'General Business')
            print(f"\nStep 1: Generating ecosystem concepts around seed agent: '{seed_profile.get('agent_id')}'...")
            
            # 1. IDEATION (DESCRIBE): Get the simple concepts first
            ecosystem_concepts = llm_interface.generate_ecosystem_concepts_with_llm(
                self.llm_client, self.economy_type, core_business_model
            )
            time.sleep(2) # Pace the generation process

            if not ecosystem_concepts:
                print(f"Could not generate concepts for seed '{seed_profile.get('agent_id')}'.")
                continue

            # 2. ELABORATION (CREATE): For each concept, generate its full profile
            print(f"Step 2: Elaborating on {len(ecosystem_concepts)} generated concepts...")
            for concept in ecosystem_concepts:
                agent_id_concept = concept.get('agent_id', 'Unnamed Concept')
                print(f"  - Generating full profile for concept: '{agent_id_concept}'...")
                
                full_profile = llm_interface.generate_agent_profile_from_concept(
                    self.llm_client, self.economy_type, concept
                )
                
                if full_profile:
                    all_complete_generated_profiles.append(full_profile)
                    
                time.sleep(5) # Give the detailed generation more time to avoid rate limits

        # Combine the original seed agents with the newly generated ones
        final_agent_profiles = seed_agent_profiles + all_complete_generated_profiles
        self.final_profiles_for_reporting = final_agent_profiles

        # --- ROBUST AGENT CREATION LOOP (using the final, validated list) ---
        self.agents = []
        print("\n--- Creating Agent Instances from All Profiles ---")
        for profile_data in final_agent_profiles:
            # Validate that the essential nested dictionary exists and has the required key
            supply_chain_info = profile_data.get("supply_chain")
            if isinstance(supply_chain_info, dict) and "model_type" in supply_chain_info:
                # If valid, create the agent
                agent = InstitutionalAgent(
                    agent_id=f"{profile_data.get('agent_id', 'Unnamed Agent')}_{self.economy_type}",
                    vision_statement=profile_data.get("vision_statement", ""),
                    business_model=profile_data.get("business_model", ""),
                    initial_status=profile_data.get("initial_status", {}),
                    supply_chain_data=supply_chain_info,
                    llm_client=self.llm_client
                )
                self.agents.append(agent)
            else:
                # If invalid, print a warning and skip this agent
                agent_id = profile_data.get('agent_id', 'Unknown Profile')
                print(f"FATAL WARNING: Discarding agent '{agent_id}' due to missing or invalid 'supply_chain' data in its profile.")
        
        if not self.agents:
            raise ValueError(f"Could not create any valid agents for the {self.economy_type} economy. Please check profile data.")

        print(f"Genesis Complete. Initialized '{self.economy_type}' Economy with a total of {len(self.agents)} interacting agents.")

    def run(self):
        """Runs the full simulation for this economy from start to finish."""
        print(f"\n\n<<<<<<<<<< RUNNING SIMULATION FOR: {self.economy_type.upper()} ECONOMY >>>>>>>>>>>>")
        
        for step in range(self.environment.duration):
            triggered_events = self.environment.update()
            
            for event in triggered_events:
                event_handlers.process_event(event, self)

            for agent in self.agents:
                lca_message = agent.think_and_act(
                    eco_consultant=self.eco_consultant,
                    triggered_events=triggered_events,
                    material_prices=self.environment.material_prices
                )
                if lca_message:
                    self.lca_auditor.process_action_message(lca_message, agent.agent_id)
                time.sleep(1)

    def get_aggregate_results(self):
        """
        Calculates and returns the aggregate performance of the entire economy,
        now correctly including the list of all agent profiles for the final report.
        """
        if not self.agents:
            return {
                "economy_type": self.economy_type,
                "number_of_agents": 0,
                "agent_profiles": [],
                "aggregate_final_status": "{}",
                "total_co2": "0.00 kg CO2e"
            }

        metrics_to_aggregate = ['profit_margin', 'cash_flow', 'esg_performance', 'market_share']
        final_metrics = {metric: [] for metric in metrics_to_aggregate}
        
        for agent in self.agents:
            for metric in metrics_to_aggregate:
                final_metrics[metric].append(agent.profile.dynamic_status.get(metric, 0))

        import numpy as np
        aggregate_status = {metric: f"{np.mean(values):.2f}" for metric, values in final_metrics.items()}
        
        results = {
            "economy_type": self.economy_type,
            "number_of_agents": len(self.agents),
            "agent_profiles": self.final_profiles_for_reporting,
            "aggregate_final_status": json.dumps(aggregate_status),
            "total_co2": f"{self.lca_auditor.total_footprint_kg_co2e:,.2f} kg CO2e"
        }
        return results